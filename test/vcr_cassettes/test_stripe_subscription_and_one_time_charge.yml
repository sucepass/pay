---
http_interactions:
- request:
    method: post
    uri: https://api.stripe.com/v1/customers
    body:
      encoding: UTF-8
      string: email=stripe%40example.org&name=Stripe+User
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/5.38.0 PayRails/3.0.0 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer sk_test_ex0JDdQGDv6z2QmAIVQUOyE6
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_Lr0mhzudp6GdJX","request_duration_ms":0}}'
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"3.0.0"},"bindings_version":"5.38.0","lang":"ruby","lang_version":"3.0.2
        p107 (2021-07-07)","platform":"x86_64-darwin20","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.local 20.5.0 Darwin Kernel Version 20.5.0: Sat May  8 05:10:33
        PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.local"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 30 Aug 2021 01:41:08 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '594'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Request-Id:
      - req_uNGDphu10I1zBb
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-C-Cost:
      - '0'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: UTF-8
      string: |
        {
          "id": "cus_K8G0ZCe944aljN",
          "object": "customer",
          "address": null,
          "balance": 0,
          "created": 1630287668,
          "currency": null,
          "default_source": null,
          "delinquent": false,
          "description": null,
          "discount": null,
          "email": "stripe@example.org",
          "invoice_prefix": "D342C964",
          "invoice_settings": {
            "custom_fields": null,
            "default_payment_method": null,
            "footer": null
          },
          "livemode": false,
          "metadata": {
          },
          "name": "Stripe User",
          "next_invoice_sequence": 1,
          "phone": null,
          "preferred_locales": [

          ],
          "shipping": null,
          "tax_exempt": "none"
        }
  recorded_at: Mon, 30 Aug 2021 01:41:08 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/payment_methods/pm_card_visa/attach
    body:
      encoding: UTF-8
      string: customer=cus_K8G0ZCe944aljN
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/5.38.0 PayRails/3.0.0 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer sk_test_ex0JDdQGDv6z2QmAIVQUOyE6
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_uNGDphu10I1zBb","request_duration_ms":475}}'
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"3.0.0"},"bindings_version":"5.38.0","lang":"ruby","lang_version":"3.0.2
        p107 (2021-07-07)","platform":"x86_64-darwin20","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.local 20.5.0 Darwin Kernel Version 20.5.0: Sat May  8 05:10:33
        PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.local"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 30 Aug 2021 01:41:09 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '943'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Request-Id:
      - req_MGOEQTz5A9Kgid
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-C-Cost:
      - '4'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: UTF-8
      string: |
        {
          "id": "pm_1JTzUnKXBGcbgpbZc3sp9wS3",
          "object": "payment_method",
          "billing_details": {
            "address": {
              "city": null,
              "country": null,
              "line1": null,
              "line2": null,
              "postal_code": null,
              "state": null
            },
            "email": null,
            "name": null,
            "phone": null
          },
          "card": {
            "brand": "visa",
            "checks": {
              "address_line1_check": null,
              "address_postal_code_check": null,
              "cvc_check": null
            },
            "country": "US",
            "exp_month": 8,
            "exp_year": 2022,
            "fingerprint": "w4XDzQOFakih5EZM",
            "funding": "credit",
            "generated_from": null,
            "last4": "4242",
            "networks": {
              "available": [
                "visa"
              ],
              "preferred": null
            },
            "three_d_secure_usage": {
              "supported": true
            },
            "wallet": null
          },
          "created": 1630287669,
          "customer": "cus_K8G0ZCe944aljN",
          "livemode": false,
          "metadata": {
          },
          "type": "card"
        }
  recorded_at: Mon, 30 Aug 2021 01:41:09 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/customers/cus_K8G0ZCe944aljN
    body:
      encoding: UTF-8
      string: invoice_settings[default_payment_method]=pm_1JTzUnKXBGcbgpbZc3sp9wS3
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/5.38.0 PayRails/3.0.0 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer sk_test_ex0JDdQGDv6z2QmAIVQUOyE6
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_MGOEQTz5A9Kgid","request_duration_ms":771}}'
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"3.0.0"},"bindings_version":"5.38.0","lang":"ruby","lang_version":"3.0.2
        p107 (2021-07-07)","platform":"x86_64-darwin20","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.local 20.5.0 Darwin Kernel Version 20.5.0: Sat May  8 05:10:33
        PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.local"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 30 Aug 2021 01:41:09 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '619'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Request-Id:
      - req_N0YO2irVV99Z4P
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-C-Cost:
      - '0'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: UTF-8
      string: |
        {
          "id": "cus_K8G0ZCe944aljN",
          "object": "customer",
          "address": null,
          "balance": 0,
          "created": 1630287668,
          "currency": null,
          "default_source": null,
          "delinquent": false,
          "description": null,
          "discount": null,
          "email": "stripe@example.org",
          "invoice_prefix": "D342C964",
          "invoice_settings": {
            "custom_fields": null,
            "default_payment_method": "pm_1JTzUnKXBGcbgpbZc3sp9wS3",
            "footer": null
          },
          "livemode": false,
          "metadata": {
          },
          "name": "Stripe User",
          "next_invoice_sequence": 1,
          "phone": null,
          "preferred_locales": [

          ],
          "shipping": null,
          "tax_exempt": "none"
        }
  recorded_at: Mon, 30 Aug 2021 01:41:09 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/subscriptions
    body:
      encoding: UTF-8
      string: expand[0]=pending_setup_intent&expand[1]=latest_invoice.payment_intent&expand[2]=latest_invoice.charge.invoice&items[0][plan]=default&items[0][quantity]=1&off_session=true&add_invoice_items[0][price]=price_1ILVZaKXBGcbgpbZQ26kgXWG&trial_from_plan=true&customer=cus_K8G0ZCe944aljN
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/5.38.0 PayRails/3.0.0 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer sk_test_ex0JDdQGDv6z2QmAIVQUOyE6
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_N0YO2irVV99Z4P","request_duration_ms":356}}'
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"3.0.0"},"bindings_version":"5.38.0","lang":"ruby","lang_version":"3.0.2
        p107 (2021-07-07)","platform":"x86_64-darwin20","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.local 20.5.0 Darwin Kernel Version 20.5.0: Sat May  8 05:10:33
        PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.local"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 30 Aug 2021 01:41:12 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '24854'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Request-Id:
      - req_BZZQ3VTjeqPRRF
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-C-Cost:
      - '7'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 30 Aug 2021 01:41:12 GMT
- request:
    method: get
    uri: https://api.stripe.com/v1/subscriptions/sub_K8G0dWSakF6GsL?expand%5B%5D=latest_invoice.charge.invoice&expand%5B%5D=latest_invoice.payment_intent&expand%5B%5D=pending_setup_intent
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/5.38.0 PayRails/3.0.0 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer sk_test_ex0JDdQGDv6z2QmAIVQUOyE6
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_BZZQ3VTjeqPRRF","request_duration_ms":2397}}'
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"3.0.0"},"bindings_version":"5.38.0","lang":"ruby","lang_version":"3.0.2
        p107 (2021-07-07)","platform":"x86_64-darwin20","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.local 20.5.0 Darwin Kernel Version 20.5.0: Sat May  8 05:10:33
        PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.local"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 30 Aug 2021 01:41:12 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '24854'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Request-Id:
      - req_FWxGoGLgh1DOKV
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-C-Cost:
      - '0'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 30 Aug 2021 01:41:12 GMT
recorded_with: VCR 6.0.0
